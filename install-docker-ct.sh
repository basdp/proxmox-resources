#!/usr/bin/env bash

# This script runs on a clean Ubuntu 24.04 LTS server and provisions as a
# lightweight and standalone docker service.

# Instructions:
# - Create a new Ubuntu 24.04 LTS server container on Proxmox
# - Open the shell on the container and run this script
#   bash -c "$(wget -qLO - https://github.com/basdp/proxmox-resources/raw/main/install-docker-ct.sh)"


# check if this is in fact ubuntu 24.04
if [ "$(lsb_release -rs)" != "24.04" ]; then
    echo "This script is intended for Ubuntu 24.04 LTS only."
    exit 1
fi

# check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root."
    exit 1
fi

# fail on error
set -e
# fail on unset variable
set -u
# fail on pipe error
set -o pipefail
# fail on command error
set -o errexit
# fail on command error in subshell
set -o errtrace

# install dialog
if ! command -v dialog &> /dev/null; then
    echo "dialog could not be found, installing it..."
    apt-get update > /dev/null
    apt-get install -y dialog > /dev/null
fi

function int_dialog() {
    echo dialog --backtitle "BasdP's Docker CT environment" --title 'Docker CT environment' $@
}

function progressbox() {
    int_dialog --progressbox "$1" 20 80 $@
}

{
    while true
    do date 
    sleep 1 
    sleep 1
    done 
    ls
} | progressbox "hopi" 

{
    apt-get update
    apt-get upgrade -y
} | progressbox "Updating system..."

{
    apt-get install -y whiptail ca-certificates curl jq dialog
    # disable ssh server, it's not needed
    apt-get remove -y openssh-server
} | progressbox "Installing dependencies..."

{
    # from https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
} | progressbox "Installing Docker..."

{
    echo "ðŸŽˆ Provisioning root account for first use..."
    passwd -d root   # remove password
    chage -d 0 root  # force password change on first login
    rm -f /etc/ssh/ssh_host_*_key
    rm -f /etc/ssh/ssh_host_*_key.pub

    # update issue
    cat <<EOF > /etc/issue
BasdP's Docker CT environment version 1.
Running on Ubuntu 24.04 LTS
EOF
# update motd
rm -rf /etc/update-motd.d/*
cat <<EOF > /etc/update-motd.d/00-docker-ct
#!/bin/bash
# This file is managed by BasdP's Docker CT environment
# Do not edit this file, it will be overwritten on update
# This file is used to display the message of the day
# on login to the Docker CT environment

printf "Welcome to the Docker Container Terminal (CT) environment.\n"
printf "\n"
printf "Some useful docker commands:\n"
printf " $ docker ps -a                        Show running containers\n"
printf " $ docker images                       Show images\n"
printf " $ docker network ls                   Show networks\n"
printf " $ docker volume ls                    Show volumes\n"
printf " $ docker exec -it <container> bash    Enter a container\n"
printf " $ docker logs <container>             Show container logs\n"
printf " $ docker rm <container>               Remove a container\n"
printf " $ docker images prune                 Remove unused images\n"
printf " $ docker system prune                 Remove unused ct, img, net\n"
printf "\n"
printf " Some useful docker compose commands:\n"
printf " $ docker compose up -d                Start stack\n"
printf " $ docker compose down                 Stop stack\n"
printf " $ docker compose logs                 Show logs\n"
printf " $ docker compose ps                   Show services\n"
printf " $ docker compose exec <service> bash  Enter a service\n"
printf " $ docker compose pull                 Pull latest images\n"
printf "\n"
EOF
    chmod +x /etc/update-motd.d/00-docker-ct

    cat <<EOF > /etc/update-motd.d/10-list-containers
#!/bin/bash
# This file is managed by BasdP's Docker CT environment
# Do not edit this file, it will be overwritten on update
# This file is used to display the list of containers
# on login to the Docker CT environment

# if there are no docker containers running, exit
if [ -z "$(docker ps --format json | jq -r '.[] | select(.Status == "running")')" ]; then
    printf " No docker containers running.\n"
    printf "\n"
    exit 0
fi

printf " Currently running containers:\n"
docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}"
printf "\n"
EOF
    chmod +x /etc/update-motd.d/10-list-containers

    cat <<EOF > /etc/update-motd.d/20-list-services
#!/bin/bash
# This file is managed by BasdP's Docker CT environment
# Do not edit this file, it will be overwritten on update
# This file is used to display the list of containers
# on login to the Docker CT environment

# if there are no docker compose projects running, exit
if [ -z "$(docker compose ls --format json | jq -r '.[] | select(.Status == "running")')" ]; then
    printf " No docker compose projects running.\n"
    printf "\n"
    exit 0
fi

printf " Currently running docker compose services:\n"
echo -e NAME\\tSTATUS\\n$(docker compose ls --format json | jq -r '.[] | "\(.Name)\t\(.Status)\t\(.Configs)"') | column -t
printf "\n"
EOF
    chmod +x /etc/update-motd.d/20-list-services
} | progressbox "Provisioning root account for first use..."

# show a dialog to inform the user the template is done and ask to shutdown
if int_dialog --yesno "Installation finished! Do you want to shutdown the container now?" 10 50; then
    echo "ðŸ’¤ Shutting down..."
    shutdown now
else
    echo "You chose not to shutdown. Exiting script."
fi
